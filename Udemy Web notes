Notities met Anouk
Positioning
Start bij het beeld van waar je naartoe wilt en werk vervolgens terug
Stackoverflow is your friend

“Buzzwords”
DRY: don’t repeat yourself
KISS: Keep It Simple Stupid

Udemy course
Introduction to HTML (using www.codepen.io)

HTML is a hypertext markup language - markup is used to indicate how text is printed/displayed

Example used was title Sherlock Holmes:
	<h1></h1> → <h6></6>

How do we know what the boundaries/rules are? Use documentation: 
Mozilla (“MDN”)
W3 schools
devdocs.io


Anatomy of HTML tag
Tags can be structured in different ways:

	<h1>”content”</h1> vs <br>

<h1> = opening tag; </h1> = closing tag; “content” = content

Tag contains reference & attribute:
	<hr size=”3” noshade>

A comment contains information that should not act as markup language - different purpose
	<!-- this is a comment →


The HTML Boilerplate
Boilerplate is standard “cheatsheet” template that developers use to minimise work

HTML boilerplate in Atom = “html” → consists of head, body and meta tags

Meta tags say a lot about the website:
“utf-8” is a standard “uni language” that accepts all symbols & emojis.
Other meta tags that are used include “description”
	Search engines use this description tag to display the general content on their page


Structure of HTML
Hierarchy is important → indent all the code that falls under a parent tag
Download “beautify” package to help with this


HTML - meaning over style <i> vs <em>:
	<i> simply styles the text (not the function of HTML)
<em> is more meaningful as it adds functionality to the tag (emphasises the corresponding text


HTML listing
<ol> = ordered list
	1.
	2.
	3.

<ul> = unordered list
	-
	-
	-

<li> = list item

It’s possible to put ordered lists under unordered lists & vice versa… 


HTML images
Source = web (url address) or local (file)
Local image needs to directed through a path if the image is in another folder

Alt tag = alternative text (in case image can’t be displayed) - search engine optimisation


HTML links
Links are created through Anchor (<a>) tags… They come with a ref and require a text that displays the link

It’s possible to create multiple sub-pages using these anchor tags (by referring to the file structure in the href of the HTML document


HTML tables
Tables can be used to list/structure your data. They consist of “heads” and “bodies”.
The example below consists of a header and a body (represented in 1 header & 1 body.

Language:
<table>
	<thead>
		<tr>
			<td>table content 1</td>
			<td>table content 2</td>
		</tr>
</thead>
<tbody>
		<tr>
			<td>table content 1</td>
			<td>table content 2</td>
		</tr>
</tbody>
</table> 

Important to understand that styling is NOT done using HTML (“deprecated”)
CSS will be used to set borders, include colouring etc.


HMTL forms
Forms allow for interaction with users (enter text/fill password/check box)
Consists of “label”, “input”, “textarea”
label = description; 
input = value(s) to be entered (date, email, etc.)
Textarea = adaptable area to enter text

The attributes in Forms allow for Javascript actions
	“Action”, “method”, “enctype”

Action = where will the forms be redirected to?
Method = what happens with the data?
Enctype = in what format will the text be?


-------------------------------------------------------------------------------------------------------------------------------

CSS
All about designs of a website

Coloring - useful pallet website = www.colorhunt.co
RGB = Red Green Blue ( e.g. #990000 = red)

Multiple ways of adding CSS - internal = style vs attribute,
Danger attribute = repetition will causes a lot of extra work & errors

E.g. Style:
<head>
	<style>
		body{
			background-color: blue;
}
hr{
Border-style: none;
height: 1px;
width: 10%;
}
	</style>
</head>


Browsers come with default css rules
Use google to identify what the rules are and set style to “none”

Hierarchy in CSS rules (prio high-low):
CSS implemented directly in HTML code
Internal CSS styling
External CSS styling

To debug CSS code, check Google’s “Developer Tool”

CSS Syntax
Selector{property:value;}
Who?      What?    How?

When adjusting many properties in a selector, use a new line. Example:

h1{
color: green;
font-family: monospace;
font-style: bold;
}

Keep items in property in alphabetical order for debugging - best practice
Use the MDN Reference page to find all syntax properties that can be changed.

CSS classes
Classes enable you to personalise the same tags for different categories (e.g. images)

Define class=”specific_item” in HTML
Refer to .specific_item in CSS stylesheet starting with a dot

Similar to HTML vs CSS hierarchy → the more specific the element > the higher the priority

CSS IDs
IDs have a similar function to classes: assign styling to a specific tag

Difference:
It is unique to that specific tag
While tags can refer to multiple classes, they can’t refer to multiple IDs

Comparison with Name vs Passport

Define ID=”specific_item” in HTML
Refer to #specific_item in CSS stylesheet starting with a hashtag

Favicon
Favicon = Favourite icon
Enables you to include an image/icon in the tab (top).

Uses same HTML structure (in <head>) as link to an imported “stylesheet”:

<Link rel=“icon” href=”NameOfIcon.ico”>

Div element
HTML element that stands for “content division” → split parts of a page. Example:

<body>
	<div>
		<h1>learning = progress</h1>
	</div>
</body>

Use the Stylesheet to determine the looks of <div>

Divs elements come with different sizing options according to the “box model”, incl:

Padding, Border, Margin. These impact the size of the Div.
Div{
height: 200px;
Width: 200px;
Border: solid 10px;
Padding: 20px
}

^^ total width / height of the box is 200+(10*2)+(20*2).
If you want to place an element in the centre, use margin.

Display properties
Block elements (e.g. <p>,<h1>)- take up the entire line of a page, but can be adjusted for size
Inline display elements (e.g. <span> <a>) - wrap around the content, but cannot be adjusted for size
Inline-block (to be added to block elements in CSS) - combination of both
None - “display: none” in CSS will remove the element from the site. Alternatively use “visibility: hidden”.

Questions: when to use which display property?
What is the advantage of block elements over “inline-block display”?

CSS positioning
By default 3 rules:
Content is everything
Order comes from HTML code
Children sit on top of parent (Z-axis)

HTML uses static position

Relative positioning
Positioning an element relative to its location. Example of square of 100px high and 100px wide:

.square{
Position: relative
Left: 30px
}

This will move the box 30px to the right of its previous position

Side-note: the “px” for “0px” does not need to be specified → 0 is sufficient

Absolute positioning
Positioning an element relative to its parent. Example of a box in a container of 200px high and 200px wide:

.box{
Position: absolute;
Right: 20px
}

This will move the box to 20px from the right of the container (or 180px from the left of the page).
If you put a relative position on the container of “left: 50px”, this should move the box up by 50px as well!

NOTE: In order to effectively use Absolute positioning, the ancestor must also have a “positioned”

Fixed positioning
Fixed position will not move the element on the page at all - used for navigation/menu bars! 
Example of a menu bar:

.menubar{
position : fixed
Top: 0
}

Fonts
Use “font-family” in CSS to determine fonts.
Multiple fonts can be included to ensure back-up in case a font isn’t available
Fonts available for Win & Mac → https://www.cssfontstack.com/

Embed fonts (google font) - downloads the fonts when accessing the page
To do this:
	Incorporate the link in the index.html (head element)
	Add the styles to the CSS file


Font sizing
Can be done in pixels, but won’t increase in size if settings in the browser are changed
Use “%” or “em”:
	100% or “1em” = 16px

“Em” is inherited → use rem (“Root em”) to make sure that this doesn’t cause problems

Javascripts - basics

Javascript is NOT the same as Java (similar name, but different language)
Javascript acts as a “script” with a:
	
	function(“message or action”);

Implement Javascript in the chrome browser:
Refer to developer tools → console or sources/snippets and type your script

Standard practice on how to write code can be found here.

Data types

String: “Hello”
Boolean: True, False
Number: 1, 2, 3

Variable naming
Conventions to remember - variables:
Cannot start with numbers
Cannot contain spaces
Cannot be called “var”
Can only include letters $ or _
Use “camel casing” = therapistfinder.com vs therapistFinder.com

Strings
Strings are pieces of code that use whatever the user of the code putts in between the opening and closing brackets

Var myName = “Alex”;

Alex is the string returned as part of variable myName

Strings can be used in multiple functions:
	To determine Length = string.length;
	To slice = string.slice(0,20); → this will cut off the string outside the 1st and 19th character (“0-20”)
	To upper/lower case = string.toUpperCase();

Numbers
Maths is frequently used in coding. Most solutions use familiar formulas (+, -, *, /)

‘%’ is an outlier: X%Y returns the difference of X/Y.
	12 % 8 = 4 → 8 fits in 12 one time and the remainder is 4

Use BODMAS to determine precedence in calculations
	Brackets
	Orders (root & power)
	Division
	Multiplication
	Addition
	Subtraction

To add or subtract 1 from a variable, use ++ or -- respectively:
X = 10;
X++ = 11

To add more than 1 to a variable, use += (-= is for subtraction):
X = 10;
X +=2;
X = 12;

Question for Anouk:
Why is y = 4 in the following sequence:
var x = 3;
var y = x++;
y =+ 1;

Answer: ‘x++’ does not assign the value to ‘y’ 

What’s best practice when creating a sequence of variables? E.g.

var name = prompt(“What is your name?”);
var firstChar = name.slice(0,1).toUpperCase();
var remainingChar = name.slice(1).toLowerCase();
name = firstChar + remainingChar;

alert(”Hello, “ + name);

What is best practice when creating functions
Answer: Idea of a function is to carry out 1 activity

Usage of “var”, “let”, “const”
Answer:
Var = 
Let = 
Const = one-off value that cannot be changed.

Functions
Functions enable code to call/carry out particular actions. Can be useful when actions are repetitive.

Function getMilk(){
	console.log(“walk to the store”);
	console.log(“buy milk”)
	console.log(“walk home”)
}

You can also specify the action even further by setting parameters in the function
E.g. for collecting milk: 
number of bottles
Amount of money
At a specific time

These parameters are provided inside the brackets of the calling function.
E.g. on number of bottles:

Function getMilk(bottles){
	console.log(“walk to the store”);
	console.log(“buy milk”)
	console.log(“walk home”)
}

getMilk(12); will call the function to use 12 bottles as a parameter.

Javascript functions can interact with each other through input & output statements.
Outputs are generated in the form of a “return”;

If input parameters in “getMilk” are a combination of nr of bottles and money, you can create a return statement in the function to generate a final output based on the calculations.

function getMilk (money, costPerBottle) {
	console.log("With "+ money + " euros, I can buy " + Math.floor(money / costPerBottle) + " bottles");
    var change = money % costPerBottle;
    return console.log("Here is your " + change + " euros change");
}

getMilk(11,2);


I will be able to provide an output of the number of change left in the example above.

If, Else, &&, ||, <, >  statements

Use these to act als filters.
=== includes datatypes when checking if equal
== does NOT include datatypes

Array

.length
.includes
.push
.pop
